
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftSUMARESTAleftMULTDIVleftPOTENCIAMODULOrightsincostanleftPARIZQPARDERASIGNAR DIV ENTERO IDENTIFICADOR IGUAL MINUSMINUS MODULO MULT PARDER PARIZQ PLUSPLUS POTENCIA RESTA SUMA cos sin tandeclaracion : expresion\n    expresion  :   expresion SUMA expresion\n                |   expresion RESTA expresion\n                |   expresion MULT expresion\n                |   expresion DIV expresion\n                |   expresion POTENCIA expresion\n                |   expresion MODULO expresion\n\n    expresion : sin PARIZQ expresion PARDER\n                | cos PARIZQ expresion PARDER\n                | tan PARIZQ expresion PARDERexpresion  : PARIZQ expresion PARDERexpresion : ENTERO'
    
_lr_action_items = {'sin':([0,4,8,9,10,11,12,13,14,16,17,],[3,3,3,3,3,3,3,3,3,3,3,]),'cos':([0,4,8,9,10,11,12,13,14,16,17,],[5,5,5,5,5,5,5,5,5,5,5,]),'tan':([0,4,8,9,10,11,12,13,14,16,17,],[6,6,6,6,6,6,6,6,6,6,6,]),'PARIZQ':([0,3,4,5,6,8,9,10,11,12,13,14,16,17,],[4,14,4,16,17,4,4,4,4,4,4,4,4,4,]),'ENTERO':([0,4,8,9,10,11,12,13,14,16,17,],[7,7,7,7,7,7,7,7,7,7,7,]),'$end':([1,2,7,18,19,20,21,22,23,25,28,29,30,],[0,-1,-12,-2,-3,-4,-5,-6,-7,-11,-8,-9,-10,]),'SUMA':([2,7,15,18,19,20,21,22,23,24,25,26,27,28,29,30,],[8,-12,8,-2,-3,-4,-5,-6,-7,8,-11,8,8,-8,-9,-10,]),'RESTA':([2,7,15,18,19,20,21,22,23,24,25,26,27,28,29,30,],[9,-12,9,-2,-3,-4,-5,-6,-7,9,-11,9,9,-8,-9,-10,]),'MULT':([2,7,15,18,19,20,21,22,23,24,25,26,27,28,29,30,],[10,-12,10,10,10,-4,-5,-6,-7,10,-11,10,10,-8,-9,-10,]),'DIV':([2,7,15,18,19,20,21,22,23,24,25,26,27,28,29,30,],[11,-12,11,11,11,-4,-5,-6,-7,11,-11,11,11,-8,-9,-10,]),'POTENCIA':([2,7,15,18,19,20,21,22,23,24,25,26,27,28,29,30,],[12,-12,12,12,12,12,12,-6,-7,12,-11,12,12,-8,-9,-10,]),'MODULO':([2,7,15,18,19,20,21,22,23,24,25,26,27,28,29,30,],[13,-12,13,13,13,13,13,-6,-7,13,-11,13,13,-8,-9,-10,]),'PARDER':([7,15,18,19,20,21,22,23,24,25,26,27,28,29,30,],[-12,25,-2,-3,-4,-5,-6,-7,28,-11,29,30,-8,-9,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaracion':([0,],[1,]),'expresion':([0,4,8,9,10,11,12,13,14,16,17,],[2,15,18,19,20,21,22,23,24,26,27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> declaracion","S'",1,None,None,None),
  ('declaracion -> expresion','declaracion',1,'p_declaracion_expr','analizador_sintactico.py',25),
  ('expresion -> expresion SUMA expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',31),
  ('expresion -> expresion RESTA expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',32),
  ('expresion -> expresion MULT expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',33),
  ('expresion -> expresion DIV expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',34),
  ('expresion -> expresion POTENCIA expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',35),
  ('expresion -> expresion MODULO expresion','expresion',3,'p_expresion_operaciones','analizador_sintactico.py',36),
  ('expresion -> sin PARIZQ expresion PARDER','expresion',4,'p_expresion_trig','analizador_sintactico.py',57),
  ('expresion -> cos PARIZQ expresion PARDER','expresion',4,'p_expresion_trig','analizador_sintactico.py',58),
  ('expresion -> tan PARIZQ expresion PARDER','expresion',4,'p_expresion_trig','analizador_sintactico.py',59),
  ('expresion -> PARIZQ expresion PARDER','expresion',3,'p_expresion_grupo','analizador_sintactico.py',68),
  ('expresion -> ENTERO','expresion',1,'p_expresion_numero','analizador_sintactico.py',73),
]
